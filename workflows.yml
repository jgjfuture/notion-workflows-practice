main:
    params: [input]
    steps:
    - init:
        call: initialize_subflow
        args:
          filter: ${input.filter}
          
        result: vars
    - access_notion_db:
        call: access_notion_db_subflow
        args:
          database_id: ${vars.database_id}
          filter: ${vars.filter}
          nextCursor: ${vars.nextCursor}
          notionApiKey: ${vars.notionApiKey}
        result: notion_response_body
    - treat_page_items:
        call: treat_page_items_subflow
        args:
          page_items: ${notion_response_body.results}
    - check_fetch_notion_has_next_page:
        switch:
            - condition: ${notion_response_body.has_more}
              assign:
                - nextCursor: '${notion_response_body.next_cursor}'
              next: access_notion_db
    - returnOutputSuccess:
            return: "ok"

initialize_subflow:
  params: [filter]
  steps:
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - secret_id: "NotionIntegrationKey-TaskViolationNotifier"
          - nextCursor: null
          - database_id: ${sys.get_env("NOTION_DATABASE_ID")}
    - access_string_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          secret_id: ${secret_id}
          project_id: ${project_id}
        result: notionApiKey
    - decode_filter_json:
        call: json.decode
        args:
          data: ${filter}
        result: filter
    - prepare_result:
        assign:
          - result_map:
              database_id: ${database_id}
              filter: ${filter}
              nextCursor: ${nextCursor}
              notionApiKey: ${notionApiKey}
    - report:
        return: ${result_map}

access_notion_db_subflow:
  params: [database_id, filter, nextCursor, notionApiKey]
  steps:
    - check_cursor_present:
        switch:
            - condition: ${nextCursor == null}
              next: access_notion_db_without_cursor
    - access_notion_db_with_cursor:
        call: http.post
        args:
            url: '${ "https://api.notion.com/v1/databases/" + database_id + "/query"}'
            body:
                filter: ${filter}
                start_cursor: ${nextCursor}
            headers:
                Content-Type: 'application/json'
                Authorization: '${"Bearer " + notionApiKey}'
                Notion-Version: '2022-06-28'
        result: notion_response
        next: report
    - access_notion_db_without_cursor:
        call: http.post
        args:
          url: '${ "https://api.notion.com/v1/databases/" + database_id + "/query"}'
          body:
            filter: ${filter}
          headers:
            Content-Type: 'application/json'
            Authorization: '${"Bearer " + notionApiKey}'
            Notion-Version: '2022-06-28'
        result: notion_response
        next: report
    - report:
        return: ${notion_response.body}

treat_page_items_subflow:
  params: [page_items]
  steps:
    - parallel_iterate:
        parallel:
          for:
            in: ${page_items}
            value: task
            steps:
              - treat_page_item:
                  call: sys.log
                  args:
                      text: ${task["properties"]["名前"]["title"][0]["plain_text"]}
    - report:
        return: "ok"
